import { Button } from "@/components/ui/button";
import { Post } from "@prisma/client";
import { randomInt } from "crypto";
import { useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import Nav from "~/components/Nav";
import { api } from "~/utils/api";

export default function Home() {
    const userQuery = api.posts.getAll.useQuery()
    const utils = api.useContext();
    const { data: sessionData } = useSession();
    const createPost = api.posts.createOne.useMutation({
      async onMutate(newPost) {
        // Cancel outgoing fetches (so they don't overwrite our optimistic update)
        await utils.posts.getAll.cancel();
  
        // Get the data from the queryCache
        const prevData = utils.posts.getAll.getData();
        let optimisticData
        if (prevData && sessionData?.user.id) {
          optimisticData = [...prevData, {
            ...newPost,
            createdAt: new Date(),
            id: "test",
            userId: sessionData?.user.id,
            updatedAt: new Date()
          }]
        }


        // Optimistically update the data with our new post
        utils.posts.getAll.setData(undefined, optimisticData)
      },
      onError(err, newPost, ctx) {
        // If the mutation fails, use the context-value from onMutate
          console.log("Internal server error")
      },
      async onSettled() {
        // Sync with server once mutation has settled
        await utils.posts.getAll.invalidate();
      },
    })
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col justify-between sm:justify-normal sm:flex-row min-h-screen">
        <div className="sm:flex flex-col hidden h-screen ">
          <h1 className="mx-9 px-10 my-4 w-min pb-0 text-4xl border border-white">ONLY NOTES</h1>
          <Nav/>
        </div>
        
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="flex flex-col items-center gap-2">
            <p className="leading-7 [&:not(:first-child)]:mt-6">
             Strona Główna
             
            </p>
            {!userQuery.data && <h1>Nie znaleziono postów</h1>}
            {
              userQuery.data?.map((post) => (
                <p key={post.id}>{post.text}</p>
              ))
            }
            <Button onClick={(e) => {
              e.preventDefault()
              createPost.mutate({
                text: "TEST"
              })
              
            }}></Button>
          </div>
        </div>
        <div className="sm:hidden block">
          <Nav/>
        </div>
      </main>
    </>
  );
}

